#include "tess_svg//SvgProcessor.h"
#include <fstream>
#include <sys/stat.h>

#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>

#include "tess_svg/idumper.h"

const auto shiftToZero = [](SvgProcessor::BoundedGroup& path)
{

    GlVertex flip(0, path.bounds.height());
    GlVertex shift(path.bounds.xmin, path.bounds.ymin);

    for (auto& v : path.vertexes)
    {
        auto shifted = (v.get() - shift.get());
        shifted.y *= -1;
        v = GlVertex(shifted  + flip.get());
    }

    for (auto& p : path.pathes)
    {
        for (auto& v : p.second.vertexes)
        {
            auto shifted = (v.get() - shift.get());
            shifted.y *= -1;
            v = GlVertex(shifted  + flip.get());
        }
    }
};

const auto scale = [](SvgProcessor::BoundedGroup& path)
{

    for (auto& v : path.vertexes)
        v = GlVertex(v.get() / path.bounds.scaleFactor());

    for (auto& p : path.pathes)
    {
        auto s = p.second.bounds.scaleFactor();
        for (auto& v : p.second.vertexes)
            v = GlVertex(v.get() / s);
    }
};

bool fexists(const std::string& name)
{
    struct stat buffer;
    return (stat (name.c_str(), &buffer) == 0);
}

int main(const int ac, const char** av)
{
    using namespace boost::program_options;
    using namespace boost::filesystem;

    // Declare a group of options that will be
    // allowed only on command line
    options_description generic("Generic options");
    generic.add_options()
    ("help", "produce help message")
    ("input-file,i", value<std::string>(), "input file name")
    ("oc,C",  value<std::string>(), "output as JSON to stdout (default if no options). Can be used with other outputs together.")
    ("ofjson,J", value<std::string>(), "output file name as JSON. Can be used with other outputs together.")
    ("fpreffix,f", "if set, uses svg file name as prefix.")
    ("preffix,p", value<std::string>(), "custom prefix of the generated constants names. Ignores --fprefix.")
    ("pretty,n", "if set will generate pretty JSON (if json selected)")
    ;

    variables_map vm;
    bool error_opts = false;
    try
    {
        store(parse_command_line(ac, av, generic), vm);
        notify(vm);
        error_opts = (!vm.count("input-file"));
    }
    catch (const error &ex)
    {
        std::cout << std::endl << ex.what() << std::endl;
        error_opts = true;
    }


    if (vm.count("help") || error_opts)
    {
        std::cout << std::endl << generic << "\n\n";
        std::cout << "Warning! Source svg (image) files must assume that initial zero rotation of Actor points to right --->>!!!!\n";
        std::cout << "If SVG file contains object \"SCREEN\" it will be used as reference for sizes and removed from output.\n";
        return 1;
    }

    auto fn = vm["input-file"].as<std::string>();


    if (fexists(fn))
    {
        //"/home/alex/Work/games/drawing.svg"
        SvgProcessor test(fn);

        test.postProcessTesselatedVerteces(scale);
        test.postProcessTesselatedVerteces(shiftToZero);


        std::string prefix = "";
        if (vm.count("fpreffix"))
            prefix = path(fn).stem().string();

        prefix = (vm.count("prefix")) ? vm["prefix"].as<std::string>() : prefix;

        const bool pretty = vm.count("pretty") > 0;

        if (vm.count("oc") > 0 || vm.count("ofjson") == 0)
            JsonDumper(std::cout, test, prefix, pretty);

        if (vm.count("ofjson"))
        {
            auto s = std::ofstream(vm["ofjson"].as<std::string>());
            JsonDumper(s, test, prefix, pretty);
        }

    }
    else
    {
        std::cerr << "File " << fn << " not found." << std::endl;
        return 2;
    }
    return 0;
}
